#!/usr/bin/env python3
"""
Test your actual prediction model for bias using known player archetypes
"""

import logging
from statistics import mean

logging.basicConfig(level=logging.INFO)

def test_known_player_archetypes():
    """Test prediction model with clearly defined player types"""
    print("üéØ TESTING PREDICTION MODEL WITH KNOWN PLAYER ARCHETYPES")
    print("=" * 70)
    
    # Known player archetypes with clear differences
    test_players = {
        "contact_elite": ["Luis Arraez"],  # .354 AVG, elite contact, minimal power
        "contact_speed": ["Jose Altuve"],  # Speed + contact, moderate power  
        "power_pure": ["Kyle Schwarber"],  # Pure power, poor contact (.197 AVG)
        "power_elite": ["Aaron Judge"],    # Elite power + decent contact
        "balanced": ["Juan Soto"],         # Elite all-around
    }
    
    try:
        from stats_fetcher_improved import fetch_real_player_stats
        # You'll need to import your actual prediction function
        # from your_predictor import predict_home_runs_for_game  # Adjust this
        
        print("\nüìä FETCHING STATS FOR ARCHETYPE PLAYERS:")
        print("-" * 50)
        
        all_player_stats = {}
        for archetype, players in test_players.items():
            stats, _ = fetch_real_player_stats(players)
            if stats:
                player_name = players[0]
                if player_name in stats:
                    all_player_stats[archetype] = {
                        'name': player_name,
                        'stats': stats[player_name]
                    }
                    
                    # Display key metrics
                    s = stats[player_name]
                    print(f"{archetype:12} | {player_name:15} | "
                          f"AVG: {s['avg']:.3f} | ISO: {s['iso']:.3f} | "
                          f"EV: {s['exit_velo']:4.1f} | Barrel: {s['barrel_pct']:.3f}")
        
        # Check if the stats make sense for each archetype
        print(f"\nüîç ARCHETYPE VALIDATION:")
        print("-" * 50)
        
        issues = []
        
        if 'contact_elite' in all_player_stats and 'power_pure' in all_player_stats:
            contact_avg = all_player_stats['contact_elite']['stats']['avg']
            power_avg = all_player_stats['power_pure']['stats']['avg'] 
            
            if power_avg > contact_avg:
                issues.append(f"‚ùå Power hitter has higher AVG ({power_avg:.3f}) than contact hitter ({contact_avg:.3f})")
            else:
                print(f"‚úÖ Contact hitter has higher AVG: {contact_avg:.3f} vs {power_avg:.3f}")
        
        if 'power_pure' in all_player_stats and 'contact_elite' in all_player_stats:
            power_iso = all_player_stats['power_pure']['stats']['iso']
            contact_iso = all_player_stats['contact_elite']['stats']['iso']
            
            if power_iso <= contact_iso:
                issues.append(f"‚ùå Power hitter doesn't have higher ISO ({power_iso:.3f}) than contact hitter ({contact_iso:.3f})")
            else:
                print(f"‚úÖ Power hitter has higher ISO: {power_iso:.3f} vs {contact_iso:.3f}")
        
        if issues:
            print(f"\nüö® STAT GENERATION ISSUES:")
            for issue in issues:
                print(f"  {issue}")
            print(f"  ‚Üí Your algorithm may be incorrectly generating player profiles")
        
        return all_player_stats
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("Need to import your actual prediction function")
        return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def test_prediction_rankings(player_stats):
    """Test if your prediction model ranks players appropriately"""
    print(f"\nüèÜ PREDICTION RANKING TEST")
    print("=" * 50)
    
    if not player_stats:
        print("‚ùå No player stats available for ranking test")
        return
    
    print("TO TEST YOUR MODEL'S BIAS:")
    print("1. Run your prediction model on these players for the same game/matchup")
    print("2. Check the HR probability rankings")
    print("3. See if contact hitters ever rank higher than expected")
    print()
    
    print("Expected realistic rankings (context-dependent):")
    print("‚Ä¢ Elite Power (Judge) - Often highest, especially vs breaking balls")
    print("‚Ä¢ Pure Power (Schwarber) - High vs RHP, lower vs elite pitching") 
    print("‚Ä¢ Balanced (Soto) - Consistently high across matchups")
    print("‚Ä¢ Contact+Speed (Altuve) - Should rank higher in small ballparks")
    print("‚Ä¢ Elite Contact (Arraez) - Should rank higher vs hard throwers")
    print()
    
    print("üö® RED FLAGS FOR BIAS:")
    print("‚Ä¢ Power hitters ALWAYS rank 1-2-3 regardless of context")
    print("‚Ä¢ Contact hitters NEVER rank in top 3")
    print("‚Ä¢ No variation based on ballpark, pitcher, or situation")
    print("‚Ä¢ Rankings ignore batting average and contact quality entirely")

def analyze_prediction_weights():
    """Help analyze the actual weights in the prediction model"""
    print(f"\n‚öñÔ∏è  PREDICTION MODEL WEIGHT ANALYSIS")
    print("=" * 50)
    
    print("EXAMINE YOUR PREDICTION ALGORITHM FOR:")
    print()
    print("1. üìä METRIC WEIGHTS:")
    print("   What % of the prediction comes from:")
    print("   ‚Ä¢ Exit Velocity: ____%")
    print("   ‚Ä¢ Barrel Rate: ____%") 
    print("   ‚Ä¢ HR/FB Ratio: ____%")
    print("   ‚Ä¢ ISO: ____%")
    print("   ‚Ä¢ Batting Average: ____%")
    print("   ‚Ä¢ Contact Quality: ____%")
    print()
    print("2. üö® BIAS WARNING SIGNS:")
    print("   ‚Ä¢ Exit Velocity + Barrel Rate > 50% of total weight")
    print("   ‚Ä¢ Batting Average < 10% of total weight")
    print("   ‚Ä¢ No adjustments for player type (contact vs power)")
    print("   ‚Ä¢ Same weights used for all situations")
    print()
    print("3. ‚úÖ BALANCED APPROACH:")
    print("   ‚Ä¢ Multiple metrics weighted appropriately")
    print("   ‚Ä¢ Contact quality factors included")
    print("   ‚Ä¢ Situational adjustments (ballpark, pitcher, weather)")
    print("   ‚Ä¢ Different weights for different player archetypes")

def suggest_specific_fixes():
    """Suggest specific fixes based on common bias patterns"""
    print(f"\nüîß SPECIFIC BIAS FIXES")
    print("=" * 50)
    
    print("IMMEDIATE ACTIONS:")
    print()
    print("1. üéØ TEST WITH EXTREME CASES:")
    print("   ‚Ä¢ Luis Arraez vs Kyle Schwarber in Coors Field")
    print("   ‚Ä¢ Does Arraez ever rank higher? (He should in some contexts)")
    print()
    print("2. üìâ REDUCE POWER METRIC DOMINANCE:")
    print("   ‚Ä¢ Exit Velocity: Reduce from 30% ‚Üí 20%")
    print("   ‚Ä¢ Barrel Rate: Reduce from 25% ‚Üí 15%")
    print("   ‚Ä¢ Add Batting Average: 15% weight")
    print("   ‚Ä¢ Add Contact Consistency: 10% weight")
    print()
    print("3. üèüÔ∏è  ADD SITUATIONAL FACTORS:")
    print("   ‚Ä¢ Small ballparks: +15% for contact hitters")
    print("   ‚Ä¢ vs Hard throwers (95+ mph): +20% for contact hitters")
    print("   ‚Ä¢ Favorable wind: +10% for contact hitters")
    print()
    print("4. üìà DYNAMIC ADJUSTMENTS:")
    print("   ‚Ä¢ Recent hot streaks: Boost contact hitters more")
    print("   ‚Ä¢ Pitcher fatigue: Favor contact hitters late in games")
    print("   ‚Ä¢ Clutch situations: Consider batting average heavily")

def main():
    """Run comprehensive bias testing"""
    print("üö® COMPREHENSIVE PREDICTION MODEL BIAS TEST")
    print("=" * 70)
    
    # Test with known archetypes
    player_stats = test_known_player_archetypes()
    
    # Test prediction rankings
    test_prediction_rankings(player_stats)
    
    # Analyze prediction weights
    analyze_prediction_weights()
    
    # Suggest fixes
    suggest_specific_fixes()
    
    print(f"\n" + "=" * 70)
    print("üéØ NEXT STEPS:")
    print("1. Run your actual prediction model on the archetype players")
    print("2. Check if contact hitters ever rank in top 3")
    print("3. Adjust metric weights if power dominates (>50% total weight)")
    print("4. Add situational factors that favor contact/speed players")
    print("5. Test again with balanced recommendations")

if __name__ == "__main__":
    main()